!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BITMAP_DEFAULT_SIZE	bitmap.h	16;"	d
BITMASK	bitmap.h	18;"	d
Bitmap	bitmap.h	/^		Bitmap( int64_t _bitSize = BITMAP_DEFAULT_SIZE ) :bitSize( _bitSize ) {$/;"	f	class:Bitmap	access:public	signature:( int64_t _bitSize = BITMAP_DEFAULT_SIZE )
Bitmap	bitmap.h	/^class Bitmap {$/;"	c
Bitmap::Bitmap	bitmap.h	/^		Bitmap( int64_t _bitSize = BITMAP_DEFAULT_SIZE ) :bitSize( _bitSize ) {$/;"	f	class:Bitmap	access:public	signature:( int64_t _bitSize = BITMAP_DEFAULT_SIZE )
Bitmap::bitSize	bitmap.h	/^		int64_t 	bitSize;	\/* size of bit in bitmap *\/$/;"	m	class:Bitmap	access:private
Bitmap::byteArray	bitmap.h	/^		int32_t *	byteArray;	\/* byte array to store bit information of bitmap *\/$/;"	m	class:Bitmap	access:private
Bitmap::copy	bitmap.cpp	/^void Bitmap::copy( Bitmap & bm ) {$/;"	f	class:Bitmap	signature:( Bitmap & bm )
Bitmap::copy	bitmap.h	/^		void copy( Bitmap & bm );$/;"	p	class:Bitmap	access:public	signature:( Bitmap & bm )
Bitmap::dump2array	bitmap.cpp	/^int Bitmap::dump2array( void *dst , int32_t byteLen ) {$/;"	f	class:Bitmap	signature:( void *dst , int32_t byteLen )
Bitmap::dump2array	bitmap.h	/^		int dump2array( void * array, int32_t byteLen) const; $/;"	p	class:Bitmap	access:public	signature:( void * array, int32_t byteLen) const
Bitmap::dump2file	bitmap.h	/^		int dump2file( int fd, int32_t offset ) const; $/;"	p	class:Bitmap	access:public	signature:( int fd, int32_t offset ) const
Bitmap::elemSize	bitmap.h	/^		int32_t		elemSize;	\/* size of byte in bitmap *\/$/;"	m	class:Bitmap	access:private
Bitmap::getBit	bitmap.h	/^		bool getBit( int64_t  bitPos ) {$/;"	f	class:Bitmap	access:public	signature:( int64_t bitPos )
Bitmap::getBitSize	bitmap.h	/^		int32_t getBitSize() {$/;"	f	class:Bitmap	access:public	signature:()
Bitmap::getByteSize	bitmap.h	/^		int32_t getByteSize() {$/;"	f	class:Bitmap	access:public	signature:()
Bitmap::merge	bitmap.cpp	/^void Bitmap::merge( Bitmap & bm )  {$/;"	f	class:Bitmap	signature:( Bitmap & bm )
Bitmap::merge	bitmap.cpp	/^void Bitmap::merge( const Bitmap& bm ) {$/;"	f	class:Bitmap	signature:( const Bitmap& bm )
Bitmap::merge	bitmap.h	/^		void merge( Bitmap & bm ) ;$/;"	p	class:Bitmap	access:public	signature:( Bitmap & bm )
Bitmap::merge	bitmap.h	/^		void merge( const Bitmap& bm ) ;$/;"	p	class:Bitmap	access:public	signature:( const Bitmap& bm )
Bitmap::setBit	bitmap.h	/^		void setBit( int64_t  bitPos )  {$/;"	f	class:Bitmap	access:public	signature:( int64_t bitPos )
Bitmap::~Bitmap	bitmap.h	/^		~Bitmap() {$/;"	f	class:Bitmap	access:public	signature:()
BloomFilter	bloomfilter.h	/^		BloomFilter( int32_t  _elemNum = defaultElemNum );$/;"	p	class:BloomFilter	access:public	signature:( int32_t _elemNum = defaultElemNum )
BloomFilter	bloomfilter.h	/^		BloomFilter( int32_t _elemNum, int32_t _hashNum );$/;"	p	class:BloomFilter	access:public	signature:( int32_t _elemNum, int32_t _hashNum )
BloomFilter	bloomfilter.h	/^BloomFilter<Type>::BloomFilter( int32_t _elemNum ):elementNum(_elemNum){$/;"	f	class:BloomFilter	signature:( int32_t _elemNum )
BloomFilter	bloomfilter.h	/^class BloomFilter {$/;"	c
BloomFilter::BloomFilter	bloomfilter.h	/^		BloomFilter( int32_t  _elemNum = defaultElemNum );$/;"	p	class:BloomFilter	access:public	signature:( int32_t _elemNum = defaultElemNum )
BloomFilter::BloomFilter	bloomfilter.h	/^		BloomFilter( int32_t _elemNum, int32_t _hashNum );$/;"	p	class:BloomFilter	access:public	signature:( int32_t _elemNum, int32_t _hashNum )
BloomFilter::BloomFilter	bloomfilter.h	/^BloomFilter<Type>::BloomFilter( int32_t _elemNum ):elementNum(_elemNum){$/;"	f	class:BloomFilter	signature:( int32_t _elemNum )
BloomFilter::HASHFUNC	bloomfilter.h	/^		typedef	int32_t (*HASHFUNC)( Type& elem ) ;$/;"	t	class:BloomFilter	access:public
BloomFilter::bitmap	bloomfilter.h	/^		Bitmap*					bitmap;						\/* bitmap *\/$/;"	m	class:BloomFilter	access:private
BloomFilter::containElement	bloomfilter.h	/^		bool containElement( Type& elem ) const ; $/;"	p	class:BloomFilter	access:public	signature:( Type& elem ) const
BloomFilter::containElement	bloomfilter.h	/^bool BloomFilter<Type>::containElement( Type& elem )const {$/;"	f	class:BloomFilter	signature:( Type& elem ) const
BloomFilter::copyBitmap	bloomfilter.h	/^		int copyBitmap( const BloomFilter<Type>& bf ); $/;"	p	class:BloomFilter	access:public	signature:( const BloomFilter<Type>& bf )
BloomFilter::copyBitmap	bloomfilter.h	/^void BloomFilter<Type>::copyBitmap( const BloomFilter<Type>& bf ) {$/;"	f	class:BloomFilter	signature:( const BloomFilter<Type>& bf )
BloomFilter::dump2file	bloomfilter.h	/^		int dump2file( int fd , int32_t offset = 0);$/;"	p	class:BloomFilter	access:public	signature:( int fd , int32_t offset = 0)
BloomFilter::elementNum	bloomfilter.h	/^		int32_t					elementNum;					\/* the number of elements may in this set *\/$/;"	m	class:BloomFilter	access:private
BloomFilter::falsePositive	bloomfilter.h	/^		static const double		falsePositive = 0.1;		\/* default probability of false positive in matching *\/$/;"	m	class:BloomFilter	access:private
BloomFilter::getByteSize	bloomfilter.h	/^		int32_t	getByteSize() ;$/;"	p	class:BloomFilter	access:public	signature:()
BloomFilter::getByteSize	bloomfilter.h	/^int32_t BloomFilter<Type>::getByteSize(){$/;"	f	class:BloomFilter	signature:()
BloomFilter::hashFuncNum	bloomfilter.h	/^		int32_t					hashFuncNum;				\/* the number of hash function *\/$/;"	m	class:BloomFilter	access:private
BloomFilter::hashFuncVec	bloomfilter.h	/^		std::vector<HASHFUNC>	hashFuncVec;				\/* set of hash functions *\/ $/;"	m	class:BloomFilter	access:private
BloomFilter::init	bloomfilter.h	/^		int init();$/;"	p	class:BloomFilter	access:public	signature:()
BloomFilter::init	bloomfilter.h	/^int BloomFilter<Type>::init() {$/;"	f	class:BloomFilter	signature:()
BloomFilter::insertElement	bloomfilter.h	/^		int insertElement( Type& elem ) ;$/;"	p	class:BloomFilter	access:public	signature:( Type& elem )
BloomFilter::insertElement	bloomfilter.h	/^int BloomFilter<Type>::insertElement( Type& elem ) {$/;"	f	class:BloomFilter	signature:( Type& elem )
BloomFilter::merge	bloomfilter.h	/^		void merge( const BloomFilter<Type>& bf ) ;$/;"	p	class:BloomFilter	access:public	signature:( const BloomFilter<Type>& bf )
BloomFilter::merge	bloomfilter.h	/^void BloomFilter<Type>::merge( const BloomFilter<Type> & bf ) { $/;"	f	class:BloomFilter	signature:( const BloomFilter<Type> & bf )
BloomFilter::readFromFile	bloomfilter.h	/^		int readFromFile( int fd, int32_t offset = 0);$/;"	p	class:BloomFilter	access:public	signature:( int fd, int32_t offset = 0)
BloomFilter::setHashFunc	bloomfilter.h	/^		void setHashFunc( HASHFUNC hashFunc, int32_t idx ) ;$/;"	p	class:BloomFilter	access:public	signature:( HASHFUNC hashFunc, int32_t idx )
BloomFilter::setHashFunc	bloomfilter.h	/^void BloomFilter<Type>::setHashFunc( HASHFUNC hashFunc, int32_t idx ) {$/;"	f	class:BloomFilter	signature:( HASHFUNC hashFunc, int32_t idx )
BloomFilter::~BloomFilter	bloomfilter.h	/^		~BloomFilter();$/;"	p	class:BloomFilter	access:public	signature:()
BloomFilter::~BloomFilter	bloomfilter.h	/^BloomFilter<Type>::~BloomFilter() {$/;"	f	class:BloomFilter	signature:()
HASHFUNC	bloomfilter.h	/^		typedef	int32_t (*HASHFUNC)( Type& elem ) ;$/;"	t	class:BloomFilter	access:public
RIGHT_SHIFT_NUM	bitmap.h	17;"	d
_BITMAP_H	bitmap.h	14;"	d
_BLOOMFILTER_H	bloomfilter.h	18;"	d
bitSize	bitmap.h	/^		int64_t 	bitSize;	\/* size of bit in bitmap *\/$/;"	m	class:Bitmap	access:private
bitmap	bloomfilter.h	/^		Bitmap*					bitmap;						\/* bitmap *\/$/;"	m	class:BloomFilter	access:private
byteArray	bitmap.h	/^		int32_t *	byteArray;	\/* byte array to store bit information of bitmap *\/$/;"	m	class:Bitmap	access:private
containElement	bloomfilter.h	/^		bool containElement( Type& elem ) const ; $/;"	p	class:BloomFilter	access:public	signature:( Type& elem ) const
containElement	bloomfilter.h	/^bool BloomFilter<Type>::containElement( Type& elem )const {$/;"	f	class:BloomFilter	signature:( Type& elem ) const
copy	bitmap.cpp	/^void Bitmap::copy( Bitmap & bm ) {$/;"	f	class:Bitmap	signature:( Bitmap & bm )
copy	bitmap.h	/^		void copy( Bitmap & bm );$/;"	p	class:Bitmap	access:public	signature:( Bitmap & bm )
copyBitmap	bloomfilter.h	/^		int copyBitmap( const BloomFilter<Type>& bf ); $/;"	p	class:BloomFilter	access:public	signature:( const BloomFilter<Type>& bf )
copyBitmap	bloomfilter.h	/^void BloomFilter<Type>::copyBitmap( const BloomFilter<Type>& bf ) {$/;"	f	class:BloomFilter	signature:( const BloomFilter<Type>& bf )
defaultElemNum	bloomfilter.h	26;"	d
dump2array	bitmap.cpp	/^int Bitmap::dump2array( void *dst , int32_t byteLen ) {$/;"	f	class:Bitmap	signature:( void *dst , int32_t byteLen )
dump2array	bitmap.h	/^		int dump2array( void * array, int32_t byteLen) const; $/;"	p	class:Bitmap	access:public	signature:( void * array, int32_t byteLen) const
dump2file	bitmap.h	/^		int dump2file( int fd, int32_t offset ) const; $/;"	p	class:Bitmap	access:public	signature:( int fd, int32_t offset ) const
dump2file	bloomfilter.h	/^		int dump2file( int fd , int32_t offset = 0);$/;"	p	class:BloomFilter	access:public	signature:( int fd , int32_t offset = 0)
elemSize	bitmap.h	/^		int32_t		elemSize;	\/* size of byte in bitmap *\/$/;"	m	class:Bitmap	access:private
elementNum	bloomfilter.h	/^		int32_t					elementNum;					\/* the number of elements may in this set *\/$/;"	m	class:BloomFilter	access:private
falsePositive	bloomfilter.h	/^		static const double		falsePositive = 0.1;		\/* default probability of false positive in matching *\/$/;"	m	class:BloomFilter	access:private
getBit	bitmap.h	/^		bool getBit( int64_t  bitPos ) {$/;"	f	class:Bitmap	access:public	signature:( int64_t bitPos )
getBitSize	bitmap.h	/^		int32_t getBitSize() {$/;"	f	class:Bitmap	access:public	signature:()
getByteSize	bitmap.h	/^		int32_t getByteSize() {$/;"	f	class:Bitmap	access:public	signature:()
getByteSize	bloomfilter.h	/^		int32_t	getByteSize() ;$/;"	p	class:BloomFilter	access:public	signature:()
getByteSize	bloomfilter.h	/^int32_t BloomFilter<Type>::getByteSize(){$/;"	f	class:BloomFilter	signature:()
hashFuncNum	bloomfilter.h	/^		hashFuncNum( _hashNum ) {$/;"	f	signature:( _hashNum )
hashFuncNum	bloomfilter.h	/^		int32_t					hashFuncNum;				\/* the number of hash function *\/$/;"	m	class:BloomFilter	access:private
hashFuncVec	bloomfilter.h	/^		std::vector<HASHFUNC>	hashFuncVec;				\/* set of hash functions *\/ $/;"	m	class:BloomFilter	access:private
init	bloomfilter.h	/^		int init();$/;"	p	class:BloomFilter	access:public	signature:()
init	bloomfilter.h	/^int BloomFilter<Type>::init() {$/;"	f	class:BloomFilter	signature:()
insertElement	bloomfilter.h	/^		int insertElement( Type& elem ) ;$/;"	p	class:BloomFilter	access:public	signature:( Type& elem )
insertElement	bloomfilter.h	/^int BloomFilter<Type>::insertElement( Type& elem ) {$/;"	f	class:BloomFilter	signature:( Type& elem )
merge	bitmap.cpp	/^void Bitmap::merge( Bitmap & bm )  {$/;"	f	class:Bitmap	signature:( Bitmap & bm )
merge	bitmap.cpp	/^void Bitmap::merge( const Bitmap& bm ) {$/;"	f	class:Bitmap	signature:( const Bitmap& bm )
merge	bitmap.h	/^		void merge( Bitmap & bm ) ;$/;"	p	class:Bitmap	access:public	signature:( Bitmap & bm )
merge	bitmap.h	/^		void merge( const Bitmap& bm ) ;$/;"	p	class:Bitmap	access:public	signature:( const Bitmap& bm )
merge	bloomfilter.h	/^		void merge( const BloomFilter<Type>& bf ) ;$/;"	p	class:BloomFilter	access:public	signature:( const BloomFilter<Type>& bf )
merge	bloomfilter.h	/^void BloomFilter<Type>::merge( const BloomFilter<Type> & bf ) { $/;"	f	class:BloomFilter	signature:( const BloomFilter<Type> & bf )
min	bitmap.cpp	/^inline int32_t min( int32_t a, int32_t b ) {$/;"	f	signature:( int32_t a, int32_t b )
readFromFile	bloomfilter.h	/^		int readFromFile( int fd, int32_t offset = 0);$/;"	p	class:BloomFilter	access:public	signature:( int fd, int32_t offset = 0)
setBit	bitmap.h	/^		void setBit( int64_t  bitPos )  {$/;"	f	class:Bitmap	access:public	signature:( int64_t bitPos )
setHashFunc	bloomfilter.h	/^		void setHashFunc( HASHFUNC hashFunc, int32_t idx ) ;$/;"	p	class:BloomFilter	access:public	signature:( HASHFUNC hashFunc, int32_t idx )
setHashFunc	bloomfilter.h	/^void BloomFilter<Type>::setHashFunc( HASHFUNC hashFunc, int32_t idx ) {$/;"	f	class:BloomFilter	signature:( HASHFUNC hashFunc, int32_t idx )
~Bitmap	bitmap.h	/^		~Bitmap() {$/;"	f	class:Bitmap	access:public	signature:()
~BloomFilter	bloomfilter.h	/^		~BloomFilter();$/;"	p	class:BloomFilter	access:public	signature:()
~BloomFilter	bloomfilter.h	/^BloomFilter<Type>::~BloomFilter() {$/;"	f	class:BloomFilter	signature:()
